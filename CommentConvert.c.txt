#include "CommentConvert.h"
enum STAE state = NUL_STATUS;

void DoConvertWork(FILE* pfIn, FILE* pfOut)
{
	while (state != END_STATUS)
	{
		switch (state)
		{
		case NUL_STATUS:
			DoNulStatus(pfIn, pfOut,&state  );
			break;
		case C_STATUS:
			DoCStatus(pfIn, pfOut, &state);
			break;
		case CPP_STATUS:
			DoCppStatus(pfIn, pfOut, &state);
			break;
		}
	}
}
void DoNulStatus(FILE* pfIn, FILE* pfOut, enum Status* status)
{
	int first = 0;
	int second = 0;
	first = fgetc(pfIn);

	switch (first)
	{
	case '/':
		second = fgetc(pfIn);
		switch (second)
		{
		case '/':
			fputc('/', pfOut);
			fputc('/', pfOut);
			state = CPP_STATUS;
			break;
		case '*':
			fputc('/', pfOut);
			fputc('/', pfOut);
			state = C_STATUS;
			break;
		case EOF:
			fputc(first, pfOut);
			state = END_STATUS;
			break;
		default:
			fputc(first, pfOut);
			fputc(second, pfOut);
			break;
		}
		break;
	case EOF:
		state = END_STATUS;
		break;
	default:
		fputc(first, pfOut);
		break;
	}
}

void DoCStatus(FILE* pfIn, FILE* pfOut, enum Status* status)
{
	int first = 0;
	int second = 0;
	int third = 0;
	first = fgetc(pfIn);
	switch (first)
	{
	case '*':
		second = fgetc(pfIn);
		switch (second)
		{
		case '/':
			state = NUL_STATUS;
			third = fgetc(pfIn);
			if (third == '/n')
			{
				ungetc(third, pfIn);
			}
			else
			{
				ungetc(third, pfIn);
				fputc('\n', pfOut);
			}
			break;
		default:
			fputc(first, pfOut);
			ungetc(second, pfIn);
			break;
		}
		break;
	case '\n':
		fputc('\n', pfOut);
		fputc('/',pfOut);
		fputc('/', pfOut);
		break;
	default:
		fputc(first, pfOut);
		break;
	}
}

void DoCppStatus(FILE* pfIn, FILE* pfOut, enum Status* status)
{
	int first = 0;
	int second = 0;
	first = fgetc(pfIn);
	switch (first)
	{
	case '\n':
		fputc(first, pfOut);
		state = NUL_STATUS;
		break;
	case EOF:
		state = END_STATUS;
		break;
	default:
		fputc(first, pfOut);
		break;
	}
}
